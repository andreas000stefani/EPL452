Git Branching & Merging Guide
=============================

1. CREATE BRANCHES
   git branch <branch-name>           # Create new branch
   git checkout -b <branch-name>      # Create AND switch to new branch (recommended)
   git switch -c <branch-name>        # Newer way to create & switch (Git 2.23+)

2. SWITCH BETWEEN BRANCHES
   git checkout <branch-name>         # Switch to existing branch
   git switch <branch-name>           # Newer way to switch (Git 2.23+)

3. SYNC WITH REMOTE BRANCHES
   git push -u origin <branch-name>   # First push: connect local branch to remote
   git push                           # Push commits to remote branch
   git pull                           # Pull latest changes from remote branch

4. MERGING BRANCHES
   git checkout main                  # Switch to target branch (e.g., main)
   git merge <feature-branch>         # Merge feature branch into current branch

5. AFTER MERGING
   git push origin main               # Push merged changes to remote
   git branch -d <feature-branch>     # Delete local branch (after successful merge)
   git push origin --delete <branch>  # Delete remote branch

Tips to Avoid Issues:
---------------------
• ALWAYS Pull Before Pushing:
  git checkout main
  git pull origin main               # Get latest changes before working

• Keep Branches Focused:
  - One feature/bugfix per branch
  - Keep branches short-lived

• Test Before Merging:
  - Test your code thoroughly before merging to main

• Communicate:
  - Let team know when you're working on shared branches
  - Use pull requests for code review

• Resolve Conflicts Step-by-Step:
  1. git pull origin main            # Will show conflicts if any
  2. Open files, look for >>>>> and <<<<< markers
  3. Edit files to keep correct code
  4. git add <resolved-files>
  5. git commit -m "Resolved conflicts"
  6. git push

Common Problems & Fixes:
------------------------
• "Your local changes would be overwritten":
  git stash                         # Save your changes temporarily
  git pull origin main              # Pull latest changes
  git stash pop                     # Restore your changes

• "Already up to date" but can't merge:
  git fetch --all                   # Refresh all remote branches
  git merge origin/main             # Try explicit merge

• Wrong branch? Changed files in wrong branch?
  git stash                         # Save changes
  git checkout correct-branch       # Switch to right branch
  git stash pop                     # Restore changes

Remember:
• Never force push to shared branches
• Delete branches after merging to keep clean
• Regular pulls prevent big conflicts
